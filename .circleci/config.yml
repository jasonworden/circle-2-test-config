version: 2.0
jobs:
  build:
    working_directory: ~/jasonworden/circle-2-test-config
    parallelism: 1
    shell: /bin/bash --login
    # CircleCI 2.0 does not support environment variables that refer to each other the same way as 1.0 did.
    # If any of these refer to each other, rewrite them so that they don't or see https://circleci.com/docs/2.0/env-vars/#interpolating-environment-variables-to-set-other-environment-variables .
    # environment:
    #   # TZ: "/usr/share/zoneinfo/America/Los_Angeles"
    #   CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
    #   CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
    #   TEST_TIMEOUT: 10000
    #   NODE_ENV: test
    #   ROOT_DIR: build
    #   HAS_ENV_FILE: false

    # While we use install node 8.9.1 below, i chose the latest version of node 8 images at
    # https://circleci.com/docs/2.0/circleci-images/#nodejs
    docker:
    - image: circleci/node:8.9.1
      environment:
        # don't think we need this tz set for machine running api (yet)
        # TZ: "/usr/share/zoneinfo/America/Los_Angeles"
        CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
        CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
        TEST_TIMEOUT: 10000
        NODE_ENV: test
        ROOT_DIR: build
        HAS_ENV_FILE: false
        PG_HOST: 127.0.0.1
        PG_USER: admin
        PG_NAME: jasonworden_test
        # PG_URL: postgres://admin@localhost/jasonworden_test
    # - image: circleci/postgres:9.6-alpine-ram
    #   environment:
    #     POSTGRES_USER: admin
    #     POSTGRES_DB: jasonworden_test
    - image: redis:3.2-alpine
    steps:
    - run: uname -a
    - run: node -v
    - run: npm -v
    - run: whoami
    #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
    - checkout
    # Prepare for artifact and test results  collection equivalent to how it was done on 1.0.
    # In many cases you can simplify this from what is generated here.
    # 'See docs on artifact collection here https://circleci.com/docs/2.0/artifacts/'
    - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
    # Restore the dependency cache
    - restore_cache:
        keys:
        - api-v2-{{ checksum "package.json" }}
        # # This branch if available
        # - v1-dep-{{ .Branch }}-
        # # Default branch if not
        # - v1-dep-dev-
        # # Any branch if there are none on the default branch - this should be unnecessary if you have your default branch configured correctly
        # - v1-dep-
    # This is based on your 1.0 configuration file or project settings
    # - run: sudo apt-get -y install postgresql-9.6

    - run: sudo chown -R circleci /usr/local

    - run:
        name: install dockerize
        command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
        environment:
          DOCKERIZE_VERSION: v0.3.0

    - run: sudo apt-get install software-properties-common
    - run: sudo apt-get install lsb-release
    - run: sudo add-apt-repository "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -sc)-pgdg main"
    - run: wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
    - run: sudo apt-get update
    - run: sudo apt-get -y install postgresql-9.6

    - run: sudo service postgresql restart

    - run:
        name: Wait until Postgres is ready
        command: dockerize -wait tcp://localhost:5432 -timeout 1m

    # https://hub.docker.com/_/redis/ container for redis instead?
    # - run: sudo apt-get -y install redis-server
    # - run: sudo service redis-server start
    - run:
        name: Wait until Redis is ready
        command: dockerize -wait tcp://localhost:6379 -timeout 1m

    - run: which createuser
    - run: which psql

    # - run: sudo chown -R circleci /usr/local
    # DB_URL: "postgres://circleci-demo-go@localhost:5432/circle_test?sslmode=disable"
    # The following line was run implicitly in your 1.0 builds based on what CircleCI inferred about the structure of your project. In 2.0 you need to be explicit about which commands should be run. In some cases you can discard inferred commands if they are not relevant to your project.
    - run: if [ -z "${NODE_ENV:-}" ]; then export NODE_ENV=test; fi
    - run: npm install
    - run: export PATH="~/jasonworden/api/node_modules/.bin:$PATH"
    - save_cache:
        # key: v1-dep-{{ .Branch }}-{{ epoch }}
        key: api-v2-{{ checksum "package.json" }}
        # key: api-node-modules-
        paths:
        # This is a broad list of cache paths to include many possible development environments
        # You can probably delete some of these entries
        - ./node_modules
    # # This is based on your 1.0 configuration file or project settings
    # - run: sudo service postgresql restart
    - run: ls
    - run: pwd
    - run: createuser $PG_USER -s -U ubuntu
    - run: createuser write -U $PG_USER
    - run: createuser read -U $PG_USER
    - run: createuser api -U $PG_USER --role write
    - run: createuser no_phi -U $PG_USER --role read
    - run: createdb $PG_NAME -U $PG_USER

    - store_test_results:
        path: /tmp/circleci-test-results
    # Save artifacts
    - store_artifacts:
        path: /tmp/circleci-artifacts
    - store_artifacts:
        path: ~/.pm2/logs/
    - store_artifacts:
        path: /tmp/circleci-test-results
